name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            install: |
              sudo apt-get update
              sudo apt-get install -y build-essential libsqlite3-dev libpcre3-dev zlib1g-dev libssl-dev perl wget curl
              sudo ln -s /usr/lib/x86_64-linux-gnu/libpcre.so /usr/lib/libpcre.so || true
          - os: macos-latest
            install: |
              brew install pcre openssl@1.1 sqlite3 wget curl
              OPENSSL_PREFIX=$(brew --prefix openssl@1.1)
              echo "PCRE_LIB_PATH=$(brew --prefix pcre)/lib/libpcre.dylib" >> $GITHUB_ENV
              echo "OPENSSL_ROOT_DIR=$OPENSSL_PREFIX" >> $GITHUB_ENV
              echo "OPENSSL_LIB_DIR=$OPENSSL_PREFIX/lib" >> $GITHUB_ENV
              echo "OPENSSL_INCLUDE_DIR=$OPENSSL_PREFIX/include" >> $GITHUB_ENV
              echo "DYLD_LIBRARY_PATH=$OPENSSL_PREFIX/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
              echo "PKG_CONFIG_PATH=$OPENSSL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
    
    runs-on: ${{ matrix.os }}
    env:
      OPENSSL_ROOT_DIR: ${{ matrix.os == 'ubuntu-latest' && '/usr' || '' }}
      OPENSSL_LIB_DIR: ${{ matrix.os == 'ubuntu-latest' && '/usr/lib/x86_64-linux-gnu' || '' }}
      OPENSSL_INCLUDE_DIR: ${{ matrix.os == 'ubuntu-latest' && '/usr/include' || '' }}
      PKG_CONFIG_PATH: ${{ matrix.os == 'ubuntu-latest' && '/usr/lib/x86_64-linux-gnu/pkgconfig' || '' }}
      LD_LIBRARY_PATH: ${{ matrix.os == 'ubuntu-latest' && '/usr/lib/x86_64-linux-gnu' || '' }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Install dependencies
      run: ${{ matrix.install }}
    
    - name: Verify OpenSSL
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          openssl version
          ls -l /usr/lib/x86_64-linux-gnu/libssl*
          ls -l /usr/include/openssl
          pkg-config --modversion openssl || true
          pkg-config --cflags openssl || true
          pkg-config --libs openssl || true
        else
          openssl version
          ls -l $(brew --prefix openssl@1.1)/lib/libssl*
          ls -l $(brew --prefix openssl@1.1)/include/openssl
          pkg-config --modversion openssl || true
          pkg-config --cflags openssl || true
          pkg-config --libs openssl || true
        fi
    
    - name: Prepare build environment
      run: |
        rm -rf build
        mkdir -p build
        cd build
        wget -q https://nginx.org/download/nginx-1.24.0.tar.gz
        tar xzf nginx-1.24.0.tar.gz
        wget -q https://sourceforge.net/projects/pcre/files/pcre/8.45/pcre-8.45.tar.gz/download -O pcre-8.45.tar.gz
        tar xzf pcre-8.45.tar.gz
        rm -f *.tar.gz
        cd pcre-8.45
        ./configure --enable-static --disable-shared
        make
        cd ..
    
    - name: Build module
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          make OPENSSL_ROOT_DIR=/usr \
               OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu \
               OPENSSL_INCLUDE_DIR=/usr/include \
               PCRE_LIB_PATH=/usr/lib/x86_64-linux-gnu/libpcre.so \
               LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu \
               PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig \
               all
        else
          OPENSSL_PREFIX=$(brew --prefix openssl@1.1)
          make OPENSSL_ROOT_DIR=$OPENSSL_PREFIX \
               OPENSSL_LIB_DIR=$OPENSSL_PREFIX/lib \
               OPENSSL_INCLUDE_DIR=$OPENSSL_PREFIX/include \
               PCRE_LIB_PATH=$(brew --prefix pcre)/lib/libpcre.dylib \
               DYLD_LIBRARY_PATH=$OPENSSL_PREFIX/lib \
               PKG_CONFIG_PATH=$OPENSSL_PREFIX/lib/pkgconfig \
               all
        fi
    
    - name: Run tests
      run: make test
    
    - name: Create release package
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && matrix.os == 'ubuntu-latest'
      run: make release
    
    - name: Upload release artifact
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: robonope-module
        path: robonope-module-*.tar.gz
        retention-days: 7

  standalone:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      OPENSSL_ROOT_DIR: /usr
      OPENSSL_LIB_DIR: /usr/lib/x86_64-linux-gnu
      OPENSSL_INCLUDE_DIR: /usr/include
      PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig
      LD_LIBRARY_PATH: /usr/lib/x86_64-linux-gnu
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libsqlite3-dev libpcre3-dev zlib1g-dev libssl-dev perl wget curl nginx-dev
        sudo ln -s /usr/lib/x86_64-linux-gnu/libpcre.so /usr/lib/libpcre.so || true
    
    - name: Verify OpenSSL
      run: |
        openssl version
        ls -l /usr/lib/x86_64-linux-gnu/libssl*
        ls -l /usr/include/openssl
        pkg-config --modversion openssl || true
        pkg-config --cflags openssl || true
        pkg-config --libs openssl || true
    
    - name: Prepare build environment
      run: |
        rm -rf build
        mkdir -p build
        cd build
        wget -q https://nginx.org/download/nginx-1.24.0.tar.gz
        tar xzf nginx-1.24.0.tar.gz
        wget -q https://sourceforge.net/projects/pcre/files/pcre/8.45/pcre-8.45.tar.gz/download -O pcre-8.45.tar.gz
        tar xzf pcre-8.45.tar.gz
        rm -f *.tar.gz
        cd pcre-8.45
        ./configure --enable-static --disable-shared
        make
        cd ..
    
    - name: Build standalone module
      run: |
        make OPENSSL_ROOT_DIR=/usr \
             OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu \
             OPENSSL_INCLUDE_DIR=/usr/include \
             PCRE_LIB_PATH=/usr/lib/x86_64-linux-gnu/libpcre.so \
             LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu \
             PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig \
             STANDALONE=1
    
    - name: Create standalone package
      run: make STANDALONE=1 install
    
    - name: Upload standalone artifact
      uses: actions/upload-artifact@v4
      with:
        name: robonope-standalone
        path: standalone/
        retention-days: 7 