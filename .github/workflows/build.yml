name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            install: |
              sudo apt-get update
              sudo apt-get install -y build-essential libsqlite3-dev libpcre3-dev zlib1g-dev libssl-dev perl wget curl nginx-dev
              sudo ln -s /usr/lib/x86_64-linux-gnu/libpcre.so /usr/lib/libpcre.so || true
          - os: macos-latest
            install: |
              brew install pcre openssl@1.1 sqlite3 wget curl
              brew install nginx
              # Debug nginx installation
              echo "Nginx installation details:"
              brew list nginx || true
              echo "Checking nginx paths:"
              nginx_prefix=$(brew --prefix nginx)
              echo "Nginx prefix: $nginx_prefix"
              # Download and extract nginx source for headers
              nginx_version=$(nginx -v 2>&1 | cut -d'/' -f2)
              echo "Nginx version: $nginx_version"
              wget "https://nginx.org/download/nginx-${nginx_version}.tar.gz"
              tar xzf nginx-${nginx_version}.tar.gz
              # Configure nginx to generate headers
              cd nginx-${nginx_version}
              ./configure \
                --prefix=$nginx_prefix \
                --with-pcre \
                --with-http_ssl_module \
                --with-openssl=$(brew --prefix openssl@1.1)
              cd ..
              # Create include directory and copy headers
              sudo mkdir -p $nginx_prefix/include
              sudo cp -r nginx-${nginx_version}/src/core $nginx_prefix/include/
              sudo cp -r nginx-${nginx_version}/src/event $nginx_prefix/include/
              sudo cp -r nginx-${nginx_version}/src/http $nginx_prefix/include/
              sudo cp -r nginx-${nginx_version}/src/os $nginx_prefix/include/
              sudo cp -r nginx-${nginx_version}/objs $nginx_prefix/include/
              # Verify headers
              echo "Verifying nginx headers:"
              ls -la $nginx_prefix/include || true
              # Export paths
              echo "NGINX_INC_PATH=$nginx_prefix/include" >> $GITHUB_ENV
              echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@1.1)" >> $GITHUB_ENV
              echo "PCRE_LIB_PATH=$(brew --prefix pcre)/lib/libpcre.dylib" >> $GITHUB_ENV
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Install dependencies
      run: ${{ matrix.install }}
    
    - name: Build standalone module
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          make PCRE_LIB_PATH=/usr/lib/x86_64-linux-gnu/libpcre.so \
               STANDALONE=1 \
               all
        else
          echo "Debug: Environment variables:"
          echo "NGINX_INC_PATH=$NGINX_INC_PATH"
          echo "OPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR"
          echo "PCRE_LIB_PATH=$PCRE_LIB_PATH"
          make PCRE_LIB_PATH="$PCRE_LIB_PATH" \
               OPENSSL_ROOT_DIR="$OPENSSL_ROOT_DIR" \
               NGINX_INC_PATH="$NGINX_INC_PATH" \
               STANDALONE=1 \
               all
        fi
    
    - name: Basic module verification
      run: |
        echo "Verifying module was built..."
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          test -f standalone/objs/ngx_http_robonope_module.so || exit 1
          file standalone/objs/ngx_http_robonope_module.so | grep -q 'shared object' || exit 1
        else
          test -f standalone/objs/ngx_http_robonope_module.so || exit 1
          file standalone/objs/ngx_http_robonope_module.so | grep -q 'dynamically linked shared library' || exit 1
        fi
        echo "Module verification successful"
    
    - name: Create release package
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && matrix.os == 'ubuntu-latest'
      run: make STANDALONE=1 release
    
    - name: Upload release artifact
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: robonope-module
        path: robonope-module-*.tar.gz
        retention-days: 7 